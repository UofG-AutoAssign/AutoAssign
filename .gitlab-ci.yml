image: python:3.8-alpine

# Define the pipeline stages
stages:
  - backend_build_test_quality
  - frontend_build_test_quality

# Define cache keys
cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - AutoAssign/venv/
    - client/node_modules/

# Define the backend jobs
backend_build:
  stage: backend_build_test_quality
  parallel: 2
  cache:
    key: "$CI_COMMIT_REF_SLUG-requirements"
    paths:
      - AutoAssign/venv/
  script:
    # Install dependencies
    - apk add --no-cache build-base
    - pip install --upgrade pip
    - cd "AutoAssign"
    - if [ ! -d "venv" ]; then python3 -m venv venv; fi
    - source venv/bin/activate
    - pip install --no-cache-dir -r requirements.txt
    # Build the Django backend
    - python manage.py makemigrations
    - python manage.py migrate

backend_test:
  stage: backend_build_test_quality
  parallel: 2
  cache:
    key: "$CI_COMMIT_REF_SLUG-requirements"
    paths:
      - AutoAssign/venv/
  script:
    # Install dependencies
    - apk add --no-cache build-base
    - pip install --upgrade pip
    - cd "AutoAssign"
    - if [ ! -d "venv" ]; then python3 -m venv venv; fi
    - source venv/bin/activate
    - pip install --no-cache-dir -r requirements.txt
    # Run the Django backend tests
    - pip install coverage
    - coverage run --source='Assign' manage.py test Assign
    - coverage report -m

backend_quality:
  stage: backend_build_test_quality
  parallel: 2
  cache:
    key: "$CI_COMMIT_REF_SLUG-requirements"
    paths:
      - AutoAssign/venv/
  script:
    # Install dependencies
    - apk add --no-cache build-base
    - pip install --upgrade pip
    - cd "AutoAssign"
    - if [ ! -d "venv" ]; then python3 -m venv venv; fi
    - source venv/bin/activate
    - pip install --no-cache-dir pylint pylint-django
    # Run pylint to check for coding style issues and other code quality problems
    - pylint --disable=C0114,C0115,R0903,C0116,E1101,W0105,W0613,E0401 ext
    - cd "Assign"
    - pylint --disable=C0114,C0115,R0903,C0116,E1101,W0105,W0613,E0401,C0302,R0911 views.py
    - pylint --disable=C0114,C0115,R0903,C0116,E1101,W0105,W0613,E0401 serializers.py
    - pylint --disable=C0114,C0115,R0903,C0116,E1101,W0105,W0613,E0401 models.py
    - pylint --disable=C0114,C0115,R0903,C0116,E1101,W0105,W0613,E0401,W0640,W0612,C0301,R0914,C0301 alg.py

  artifacts:
    paths:
      - htmlcov/

# Define the frontend jobs
frontend_build:
  stage: frontend_build_test_quality
  parallel: 2
  cache:
    key:
      files:
        - client/package-lock.json
      prefix: npm
    paths:
      - client/node_modules/
  image: node:latest
  script:
    - cd "client"
    - npm install
    - npm run build
    - cp -a dist/. ../public/
    - cd ..
  artifacts:
    paths:
      - public

frontend_test:
  stage: frontend_build_test_quality
  parallel: 2
  cache:
    key:
      files:
        - client/package-lock.json
      prefix: npm
    paths:
      - client/node_modules/
  image: node:latest
  script:
    # Install dependencies
    - cd "client"
    - npm install
    # Run frontend tests
    - echo "Frontend tests"

frontend_quality:
  stage: frontend_build_test_quality
  parallel: 2
  cache:
    key:
      files:
        - client/package-lock.json
      prefix: npm
    paths:
      - client/node_modules/
  image: node:latest
  script:
    # Install dependencies
    - cd "client"
    - npm install
    - echo "Frontend quality tests"
